"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("./path.cjs");
function composeRewrites(rewrites) {
  return {
    input: ({ url }) => {
      for (const rewrite of rewrites) {
        url = executeRewriteInput(rewrite, url);
      }
      return url;
    },
    output: ({ url }) => {
      for (let i = rewrites.length - 1; i >= 0; i--) {
        url = executeRewriteOutput(rewrites[i], url);
      }
      return url;
    }
  };
}
function rewriteBasepath(opts) {
  const trimmedBasepath = path.trimPath(opts.basepath);
  const regex = new RegExp(
    `^/${trimmedBasepath}/`,
    opts.caseSensitive ? "" : "i"
  );
  return {
    input: ({ url }) => {
      url.pathname = url.pathname.replace(regex, "/");
      return url;
    },
    output: ({ url }) => {
      url.pathname = path.joinPaths(["/", trimmedBasepath, url.pathname]);
      return url;
    }
  };
}
function executeRewriteInput(rewrite, url) {
  const res = rewrite?.input?.({ url });
  if (res) {
    if (typeof res === "string") {
      return new URL(res);
    } else if (res instanceof URL) {
      return res;
    }
  }
  return url;
}
function executeRewriteOutput(rewrite, url) {
  const res = rewrite?.output?.({ url });
  if (res) {
    if (typeof res === "string") {
      return new URL(res);
    } else if (res instanceof URL) {
      return res;
    }
  }
  return url;
}
exports.composeRewrites = composeRewrites;
exports.executeRewriteInput = executeRewriteInput;
exports.executeRewriteOutput = executeRewriteOutput;
exports.rewriteBasepath = rewriteBasepath;
//# sourceMappingURL=rewrite.cjs.map
